@model EmployeeMangmentSystem.Repository.Models.ViewModel.EmployeeUserViewModel
@using EmployeeManagementSystem.Helper
@using EmployeeMangmentSystem.Resources




@{

    if (Model.Id == Guid.Empty)
    {
        ViewBag.Title = "Add Employee";
    }
    else
    {
        ViewBag.Title = "Edit Employee";
    }
    var data = Model;
}
@*<script src="~/Scripts/ckeditor/ckeditor.js"></script>*@

<link href="~/Content/bootstrap-multiselect.css" rel="stylesheet" type="text/css" />

<script src="~/Scripts/bootstrap-multiselect.js" type="text/javascript"></script>
@*<script src="~/Scripts/jquery.validate.js" type="text/javascript"></script>*@
@*<script src="~/Scripts/jquery.validate.min.js" type="text/javascript"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js" type="text/javascript"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js" type="text/javascript"></script>*@


<script type="text/javascript">
    var dept = '@data.Department'
    var birthdate = '@Model.BirthDate';
    var joindate = '@Model.JoiningDate';
    var skill = '@data.Skills'
    var skillArr= skill.split(',');
    var id= '@data.Id'
    var empty = '@Guid.Empty'

    $(document).ready(function () {

        $(function () {
            if (id !== empty) {
                var datestrring = birthdate.split(' ')[0];
                var datestrringarr = datestrring.split('-');
                var d = new Date(datestrringarr[2], datestrringarr[1], datestrringarr[0]);
                var currMonth = d.getMonth();
                var currYear = d.getFullYear();
                var currDate = d.getDate();
                var startDate = new Date(currYear,(currMonth-1), currDate);
                $('.datepicker').datepicker('setDate', startDate);

            } else {
               var d = new Date();
                var currMonth = d.getMonth();
                var currYear = d.getFullYear();
                var currDate = d.getDate();
                var startDate = new Date(currYear, currMonth, currDate);
                $('.datepicker').datepicker('setDate', startDate);
            }

        });
        $(function () {
            if (id !== empty) {
                var datestrring = joindate.split(' ')[0];
                var datestrringarr = datestrring.split('-');
                var d = new Date(datestrringarr[2], datestrringarr[1], datestrringarr[0]);
                var currMonth = d.getMonth();
                var currYear = d.getFullYear();
                var currDate = d.getDate();
                var startDate = new Date(currYear,(currMonth-1), currDate);
                $('.datepicker1').datepicker('setDate', startDate);

            } else {
               var d = new Date();
                var currMonth = d.getMonth();
                var currYear = d.getFullYear();
                var currDate = d.getDate();
                var startDate = new Date(currYear, currMonth, currDate);
                $('.datepicker1').datepicker('setDate', startDate);
            }

        });
    });
    var j = jQuery.noConflict();
    j(function () {
        if (empty !== id) {
            //debugger
            j('.skills').multiselect('select', skillArr, {
                enableFiltering: true,
                maxHeight: 200, dropUp: true, enableCaseInsensitiveFiltering: true
            });

        } else {
            //debugger
            j('.skills').multiselect({
                enableFiltering: true, maxHeight: 200, dropUp: true, enableCaseInsensitiveFiltering: true
            });
    }

    });

    $(document).ready(function () {
        $('#Department').val(dept);
    });

    function changeStatus(id) {
         $.ajax({
            url: '@Url.Action("ChangeStatus","Employee")',
            data: { 'teamid': id },
            type: 'post',
            success: function (data) {
                if (data) {
                    //toastify("error", 'Record deleted successfully');
                    document.location.reload()
                }
            }, error: function (err) {
                toastify("error", err.statusText);
            }
        });
    }

    function SaveSkill() {
        var skill = $('.skillname').val();
        console.log("Skill name : " + skill);
        if (skill != "") {
            $.ajax({
            url: '@Url.Action("PostSkill","Skill")',
            data: { 'name': skill },
            type: 'post',
            success: function (data) {
                if (data) {
                    //toastify("error", 'Record deleted successfully');
                    document.location.reload()
                }
                $('#myModal').modal('hide');
            }, error: function (err) {
                toastify("error", err.statusText);
                $('#myModal').modal('hide');
            }
            });
        }
    }

    function validateExperience(exp) {
            if (exp.toString().includes('.')) {
                var tempexp = exp.toString().split('.');
                var intpart = tempexp[0];
                var fractionalpart = tempexp[1];
                if (fractionalpart < 12) {
                    if (fractionalpart < 10 && fractionalpart.toString().indexOf('0') != 0 ){
                        debugger
                        fractionalpart = "0" + fractionalpart;
                    }
                    var temp = intpart + "." + fractionalpart;
                    $('#Experience').val(temp);
                }
                else {
                    toastr.error("Experience is not valid");
                }
            }
            else {
                $('#Experience').val(exp);
            }
    }

    function validateUser() {
        var isValid = true;
        if ($('#FirstName').val() == '') {
            //$('#FirstName').css("border", "1px solid red");
            //$('#FirstName').focus();
            displayError($('#FirstName'));
            isValid = false;
        } else {
            removeError($('#FirstName'));
        }
        if ($('#MiddleName').val() == '') {
            displayError($('#MiddleName'));
            isValid = false;
        } else {
            removeError($('#MiddleName'));
        }
        if ($('#LastName').val() == '') {
            displayError($('#LastName'));
            isValid = false;
        } else {
           removeError($('#LastName'));
        }
        if ($('#Phone').val() == '') {
            displayError($('#Phone'));
            isValid = false;
        } else {
           removeError($('#Phone'));
        }
        if ($('#EmergencyContactName').val() == '') {
            displayError($('#EmergencyContactName'));
            isValid = false;
        } else {
            removeError($('#EmergencyContactName'));
        }
        if ($('#EmergencyContactNumber').val() == '') {
            displayError($('#EmergencyContactNumber'));
            isValid = false;
        } else {
            removeError($('#EmergencyContactNumber'));
        }
        if ($('#Address').val() == '') {
            displayError($('#Address'));
            isValid = false;
        } else {
            removeError($('#Address'));
        }
        if ($('#Email').val() == '') {
            displayError($('#Email'));
            isValid = false;
        } else {
            removeError($('#Email'));
            var regex = /^([a-zA-Z0-9_.+-])+\@@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
            if (regex.test($('#Email').val())) {

            } else {
                toastr.error("Email is not valid");
            }
        }
        if ($('#CurrentSalary').val() == '') {
            displayError($('#CurrentSalary'));
            isValid = false;
        } else {
            removeError($('#CurrentSalary'));
        }
        if ($('#Password').val() == '') {
            displayError($('#Password'));
            isValid = false;
        } else {
           removeError($('#Password'));
        }
        if ($('#Experience').val() == '') {
            displayError($('#Experience'));
            isValid = false;
        } else {
            validateExperience($('#Experience').val());
            removeError($('#Experience'));
        }
        if ($('#LeaveBalance').val() == '') {
            displayError($('#LeaveBalance'));
            isValid = false;
        } else {
            removeError($('#LeaveBalance'));
        }
        if (isValid) {
            debugger
            //var form = $(this).closest('form');
            //console.log(form);
            $('form').submit();
            //form.submit();
        }
    }

    //function onChangeData(id) {
    //    debugger
    //    if (id.val() == '') {
    //        debugger
    //        displayError(id);
    //    }
    //}

    function displayError(id) {
        $(id).css("border", "1px solid red");
    }

    function removeError(id) {
        $(id).css("border", "");
    }
</script>


<div class="x_panel">
    <div class="x_title">
        <h2>
            @if (!string.IsNullOrWhiteSpace(ViewBag.Title))
            {
                @ViewBag.Title
            }
        </h2>
        <ul class="nav navbar-right panel_toolbox">
            <li>
                <a class="collapse-link"><i class="fa fa-chevron-up"></i></a>
            </li>
        </ul>
        <div class="clearfix"></div>
    </div>
    <div class="x_content">
        @using (Html.BeginForm("Create", "Employee", FormMethod.Post))
        {
            @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.UserId)
            <div class="row text-left">
                <div class="col-lg-6 form-group">
                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-lg-6 form-group">
                    @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control" })
                    @*@Html.TextBoxFor(model => model.FirstName, new { @class = "form-control", @onChange = "onChangeData(this)" })*@
                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                </div>  <div class="col-lg-6 form-group">
                    @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-lg-6 form-group">
                    @Html.TextBoxFor(model => model.MiddleName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="row text-left">
                <div class="col-lg-6 form-group">
                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label" })
                </div>


                <div class="col-lg-6 form-group">
                    @Html.TextBoxFor(model => model.LastName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                </div>

                <div class="col-lg-6 form-group">
                    @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-lg-6 form-group">
                    @Html.TextBoxFor(model => model.BirthDate, "{0:MM-dd-yyyy}", htmlAttributes: new { @class = "form-control datepicker has-feedback-left" })
                    @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
                    <span class="fa fa-calendar-o form-control-feedback left" aria-hidden="true"></span>
                </div>
            </div>


            <div class="row text-left">
                <div class="col-lg-6 form-group">
                    @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-lg-6 form-group">
                    @Html.TextBoxFor(model => model.Phone, new { @class = "form-control has-feedback-left" })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                    <span class="fa fa-phone form-control-feedback left" aria-hidden="true"></span>
                </div>
                <div class="col-lg-6 form-group">
                    <label class="control-label">Other Contact Number</label>
                </div>
                <div class="col-lg-6 form-group">
                    @Html.TextBoxFor(model => model.OtherContact, new { @class = "form-control has-feedback-left" })
                    @*@Html.ValidationMessageFor(model => model.OtherContact, "", new { @class = "text-danger" })*@
                    <span class="fa fa-phone form-control-feedback left" aria-hidden="true"></span>
                </div>
                <div class="col-lg-6 form-group">
                    @Html.LabelFor(model => model.BloodGroup, htmlAttributes: new { @class = "control-label"})
                </div>
                <div class="col-lg-6 form-group">
                    @Html.EnumDropDownListFor(model => model.BloodGroup, new { @class = "form-control"})
                    @Html.ValidationMessageFor(model => model.BloodGroup, "", new { @class = "text-danger"})
                </div>
            </div>
            <div class="row text-left">
                <div class="col-lg-6 form-group">
                    @Html.LabelFor(model => model.EmergencyContactName, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-lg-6 form-group">
                    @Html.TextBoxFor(model => model.EmergencyContactName, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.EmergencyContactName, "", new { @class = "text-danger" })
                </div>
                <div class="col-lg-6 form-group">
                    @Html.LabelFor(model => model.EmergencyContactNumber, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-lg-6 form-group">
                    @Html.TextBoxFor(model => model.EmergencyContactNumber, new { @class = "form-control has-feedback-left" })
                    @Html.ValidationMessageFor(model => model.EmergencyContactNumber, "", new { @class = "text-danger" })
                    <span class="fa fa-phone form-control-feedback left" aria-hidden="true"></span>
                </div>
            </div>
            <div class="row text-left">
                @if (Model.Id == Guid.Empty)
                {<div class="col-lg-6 form-group">
                        @Html.LabelFor(model => model.RoleId, new { @class = "control-label" })
                    </div>
                    <div class="col-lg-6 form-group">
                        @Html.DropDownListFor(model => model.RoleId, new SelectList(ViewBag.Roles, "Id", "Name"), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })
                    </div>
                }
                <div class="col-lg-6 form-group">
                    @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-lg-6 form-group">
                    @Html.TextAreaFor(model => model.Address, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                </div>

            </div>

            <div class="row text-left">
                @if (Model.Id == Guid.Empty)
                {<div class="col-lg-6 form-group">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-lg-6 form-group">
                        @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-lg-6 form-group">
                        @Html.LabelFor(model => model.Password, new { @class = "control-label" })
                    </div>
                    <div class="col-lg-6 form-group">
                        @Html.PasswordFor(model => model.Password, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                }
                @*else
            {
                @Html.HiddenFor(model => model.Email)
                @Html.HiddenFor(model => model.Password)
            }*@

            </div>
            <div class="row text-left">
                <div class="col-lg-6 form-group">
                    @Html.Label("Department", htmlAttributes: new { @class = "control-label" })
                </div>

                <div class="col-lg-6 form-group">
                    @Html.DropDownListFor(model => model.Department, new SelectList(ViewBag.Department, "Id", "Name"), new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Department, "", new { @class = "text-danger" })
                </div>
                @if (CommonHelper.CurrentRoleName() == "Admin" || CommonHelper.CurrentRoleName() == "PM" || CommonHelper.IsSuperAdmin())
                {
                    <div class="col-lg-6 form-group">
                        @Html.Label("Skill", htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-lg-6 form-group">
                        @*@Html.DropDownListFor(model => model.Skills, new SelectList(ViewBag.Skills, "Id", "Name"), new { @class = "form-control skills", @multiple = "multiple" })*@
                        @Html.DropDownList("Skill", new SelectList(ViewBag.Skills, "Id", "Name"), new { @class = "form-control skills", @multiple = "multiple" })
                        @*<a class="btn btn-success glyphicon glyphicon-plus" onclick="OpenSkill();"></a>*@
                        @*<a class="btn btn-success glyphicon glyphicon-plus" data-toggle="modal" data-target="#openViewTeam"></a>*@
                    </div>
                }
            </div>
            <div class="row text-left">
                @if (CommonHelper.CurrentRoleName() == "Admin" || CommonHelper.CurrentRoleName() == "HR" || CommonHelper.IsSuperAdmin())
                {
                    <div class="col-lg-6 form-group">
                        @*@Html.LabelFor(model => model.Experience, htmlAttributes: new { @class = "control-label" })*@
                        <label class="control-label">   Experience(in years)</label>
                    </div>
                    <div class="col-lg-6 form-group">
                        @Html.TextBoxFor(model => model.Experience, new { @class = "form-control" })
                    </div>
                }
                @if (CommonHelper.CurrentRoleName() == "Admin" || CommonHelper.CurrentRoleName() == "HR" || CommonHelper.IsSuperAdmin())
                {
                    <div class="col-lg-6 form-group">
                        @Html.LabelFor(model => model.JoiningDate, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-lg-6 form-group">
                        @Html.TextBoxFor(model => model.JoiningDate, "{0:MM-dd-yyyy}", htmlAttributes: new { @class = "form-control datepicker1 has-feedback-left" })
                        @Html.ValidationMessageFor(model => model.JoiningDate, "", new { @class = "text-danger" })
                        <span class="fa fa-calendar-o form-control-feedback left" aria-hidden="true"></span>
                    </div>
                }
            </div>
            <div class="row text-left">
                @if (CommonHelper.CurrentRoleName() == "Admin" || CommonHelper.CurrentRoleName() == "HR" || CommonHelper.IsSuperAdmin())
                {
                    <div class="col-lg-6 form-group">
                        <label class="control-label">   Current Salary(per month)</label>
                    </div>
                    <div class="col-lg-6 form-group">
                        @Html.TextBoxFor(model => model.CurrentSalary, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CurrentSalary, "", new { @class = "text-danger" })
                    </div>
                }
                @if (CommonHelper.CurrentRoleName() == "Admin" || CommonHelper.CurrentRoleName() == "HR" || CommonHelper.IsSuperAdmin())
                {
                    <div class="col-lg-6 form-group">
                        @Html.LabelFor(model => model.LeaveBalance, new { @class = "control-label" })
                    </div>
                    <div class="col-lg-6 form-group">
                        @Html.TextBoxFor(model => model.LeaveBalance, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LeaveBalance, "", new { @class = "text-danger" })
                    </div>
                }
            </div>

            @if (Model.Projects != null && CommonHelper.CurrentRoleName() != "HR")
            {
                <div style="text-align:center; padding:20px"> <h1> Projects </h1></div>
                <div class="row">
                    <table id="demoGrid" class="table table-striped{ table-bordered dt-responsive nowrap" width="100%" cellspacing="0">
                        <thead>
                            <tr>
                                <th>
                                    Project Name
                                </th>
                                <th>
                                    Project Status
                                </th>
                                <th style="text-align:center">
                                    Currently Working
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.Projects)
                            {
                                <tr>
                                    <td>@item.Name</td>
                                    <td>
                                        @if ((int)item.ProjectStatus == 0)
                                        {
                                            @CommonResources.Pending
                                        }
                                        else if ((int)item.ProjectStatus == 1)
                                        {
                                            @CommonResources.Active
                                        }
                                        else
                                        {
                                            @CommonResources.Closed
                                        }
                                    </td>
                                    <td style="text-align:center">
                                        @if (item.CurrentlyWorking)
                                        {
                                            <button type="button" class="btn btn-success btn-sm pointer " onclick="changeStatus('@item.TeamId')">
                                                <i class="fa fa-check"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-danger btn-sm pointer " onclick="changeStatus('@item.TeamId')">
                                                <i class="fa fa-times"></i>
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }

            <div class="row text-center">
                <div>
                    @if (Model.Id == Guid.Empty)
                    {
                        @*<input type="submit" value="Save" class="btn btn-success" onclick="return showPageLoadingSpinner();" />*@
                        <input type="button" value="Save" class="btn btn-success" onclick="return validateUser();" />
                    }
                    else
                    {
                        @*@if (validateUser())
            {
                <input type="submit" value="Update" class="btn btn-success" onclick="return showPageLoadingSpinner();" />
            }*@
                        @*<input type="submit" value="Update" class="btn btn-success" onclick="return showPageLoadingSpinner();" />*@
                        <input type="button" value="Update" class="btn btn-success" onclick="return validateUser();" />
                    }

                    <a href="@Url.Action("Index","Employee")" class="btn btn-primary">Cancel</a>
                </div>
            </div>
        </div>
        }
    </div>
</div>


<div class="modal fade" id="openViewTeam" tabindex="-1" role="dialog" aria-labelledby="openViewTeam" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLongTitle">Add Skills</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    @Html.Label("Skill", htmlAttributes: new { @class = "control-label" })
                    @Html.TextBox("Employees", "", new { @class = "form-control skillname" })
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="SaveSkill()">Select</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
<style>
    .multiselect-container {
        height: 300px;
        overflow: auto;
    }
</style>